{
  "results": {
    "ogx_arcx_easy_sv": {
      "acc,none": 0.6485690235690236,
      "acc_stderr,none": 0.00979639558281772,
      "acc_norm,none": 0.6014309764309764,
      "acc_norm_stderr,none": 0.010046455400477943,
      "alias": "ogx_arcx_easy_sv"
    },
    "ogx_arcx_easy_sl": {
      "acc,none": 0.5808080808080808,
      "acc_stderr,none": 0.010124905282491187,
      "acc_norm,none": 0.5256734006734006,
      "acc_norm_stderr,none": 0.010246249665591223,
      "alias": "ogx_arcx_easy_sl"
    },
    "ogx_arcx_easy_sk": {
      "acc,none": 0.5791245791245792,
      "acc_stderr,none": 0.010130502164066331,
      "acc_norm,none": 0.5643939393939394,
      "acc_norm_stderr,none": 0.010174341733665224,
      "alias": "ogx_arcx_easy_sk"
    },
    "ogx_arcx_easy_ro": {
      "acc,none": 0.6599326599326599,
      "acc_stderr,none": 0.009720765494805272,
      "acc_norm,none": 0.6195286195286195,
      "acc_norm_stderr,none": 0.009962305992058568,
      "alias": "ogx_arcx_easy_ro"
    },
    "ogx_arcx_easy_pt-pt": {
      "acc,none": 0.7159090909090909,
      "acc_stderr,none": 0.009253921261885767,
      "acc_norm,none": 0.6519360269360269,
      "acc_norm_stderr,none": 0.009774627600259014,
      "alias": "ogx_arcx_easy_pt-pt"
    },
    "ogx_arcx_easy_pl": {
      "acc,none": 0.6132154882154882,
      "acc_stderr,none": 0.009993308355370972,
      "acc_norm,none": 0.5593434343434344,
      "acc_norm_stderr,none": 0.010187264635711991,
      "alias": "ogx_arcx_easy_pl"
    },
    "ogx_arcx_easy_nl": {
      "acc,none": 0.6452020202020202,
      "acc_stderr,none": 0.009817629113069696,
      "acc_norm,none": 0.5984848484848485,
      "acc_norm_stderr,none": 0.010058790020755572,
      "alias": "ogx_arcx_easy_nl"
    },
    "ogx_arcx_easy_lv": {
      "acc,none": 0.47895622895622897,
      "acc_stderr,none": 0.010250692602022582,
      "acc_norm,none": 0.4583333333333333,
      "acc_norm_stderr,none": 0.010224097209176596,
      "alias": "ogx_arcx_easy_lv"
    },
    "ogx_arcx_easy_lt": {
      "acc,none": 0.48358585858585856,
      "acc_stderr,none": 0.010254253565929307,
      "acc_norm,none": 0.47769360269360267,
      "acc_norm_stderr,none": 0.010249568404555636,
      "alias": "ogx_arcx_easy_lt"
    },
    "ogx_arcx_easy_it": {
      "acc,none": 0.6906565656565656,
      "acc_stderr,none": 0.00948461522060683,
      "acc_norm,none": 0.6401515151515151,
      "acc_norm_stderr,none": 0.009848484848484846,
      "alias": "ogx_arcx_easy_it"
    },
    "ogx_arcx_easy_hu": {
      "acc,none": 0.5740740740740741,
      "acc_stderr,none": 0.010146568651002257,
      "acc_norm,none": 0.5378787878787878,
      "acc_norm_stderr,none": 0.01023029962886481,
      "alias": "ogx_arcx_easy_hu"
    },
    "ogx_arcx_easy_fr": {
      "acc,none": 0.7045454545454546,
      "acc_stderr,none": 0.009361987126556458,
      "acc_norm,none": 0.6447811447811448,
      "acc_norm_stderr,none": 0.009820245899287117,
      "alias": "ogx_arcx_easy_fr"
    },
    "ogx_arcx_easy_fi": {
      "acc,none": 0.5374579124579124,
      "acc_stderr,none": 0.010230952104570805,
      "acc_norm,none": 0.5143097643097643,
      "acc_norm_stderr,none": 0.010255580881603622,
      "alias": "ogx_arcx_easy_fi"
    },
    "ogx_arcx_easy_et": {
      "acc,none": 0.48358585858585856,
      "acc_stderr,none": 0.010254253565929307,
      "acc_norm,none": 0.4642255892255892,
      "acc_norm_stderr,none": 0.01023348870972655,
      "alias": "ogx_arcx_easy_et"
    },
    "ogx_arcx_easy_es": {
      "acc,none": 0.7331649831649831,
      "acc_stderr,none": 0.009075915859267264,
      "acc_norm,none": 0.6755050505050505,
      "acc_norm_stderr,none": 0.00960697065451578,
      "alias": "ogx_arcx_easy_es"
    },
    "ogx_arcx_easy_el": {
      "acc,none": 0.5972222222222222,
      "acc_stderr,none": 0.010063960494989163,
      "acc_norm,none": 0.5408249158249159,
      "acc_norm_stderr,none": 0.010225526906982606,
      "alias": "ogx_arcx_easy_el"
    },
    "ogx_arcx_easy_de": {
      "acc,none": 0.6506734006734006,
      "acc_stderr,none": 0.009782853449399295,
      "acc_norm,none": 0.6119528619528619,
      "acc_norm_stderr,none": 0.00999929590575066,
      "alias": "ogx_arcx_easy_de"
    },
    "ogx_arcx_easy_da": {
      "acc,none": 0.6334175084175084,
      "acc_stderr,none": 0.009887786585323953,
      "acc_norm,none": 0.5787037037037037,
      "acc_norm_stderr,none": 0.010131882498193131,
      "alias": "ogx_arcx_easy_da"
    },
    "ogx_arcx_easy_cs": {
      "acc,none": 0.6334175084175084,
      "acc_stderr,none": 0.009887786585323955,
      "acc_norm,none": 0.5888047138047138,
      "acc_norm_stderr,none": 0.010096663811817683,
      "alias": "ogx_arcx_easy_cs"
    },
    "ogx_arcx_easy_bg": {
      "acc,none": 0.6536195286195287,
      "acc_stderr,none": 0.009763542075695734,
      "acc_norm,none": 0.5934343434343434,
      "acc_norm_stderr,none": 0.010079056419223527,
      "alias": "ogx_arcx_easy_bg"
    }
  },
  "group_subtasks": {
    "ogx_arcx_easy_bg": [],
    "ogx_arcx_easy_cs": [],
    "ogx_arcx_easy_da": [],
    "ogx_arcx_easy_de": [],
    "ogx_arcx_easy_el": [],
    "ogx_arcx_easy_es": [],
    "ogx_arcx_easy_et": [],
    "ogx_arcx_easy_fi": [],
    "ogx_arcx_easy_fr": [],
    "ogx_arcx_easy_hu": [],
    "ogx_arcx_easy_it": [],
    "ogx_arcx_easy_lt": [],
    "ogx_arcx_easy_lv": [],
    "ogx_arcx_easy_nl": [],
    "ogx_arcx_easy_pl": [],
    "ogx_arcx_easy_pt-pt": [],
    "ogx_arcx_easy_ro": [],
    "ogx_arcx_easy_sk": [],
    "ogx_arcx_easy_sl": [],
    "ogx_arcx_easy_sv": []
  },
  "configs": {
    "ogx_arcx_easy_bg": {
      "task": "ogx_arcx_easy_bg",
      "group": [
        "ai2_arc",
        "arcx"
      ],
      "dataset_path": "openGPT-X/arcx",
      "dataset_name": "easy_BG",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "Въпрос: {{question}}\nОтговор:",
      "doc_to_target": "{{choices.label.index(answerKey)}}",
      "doc_to_choice": "{{choices.text}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 25,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "Въпрос: {{question}}\nОтговор:",
      "metadata": {
        "version": 1
      }
    },
    "ogx_arcx_easy_cs": {
      "task": "ogx_arcx_easy_cs",
      "group": [
        "ai2_arc",
        "arcx"
      ],
      "dataset_path": "openGPT-X/arcx",
      "dataset_name": "easy_CS",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "Otázka: {{question}}\nOdpověď:",
      "doc_to_target": "{{choices.label.index(answerKey)}}",
      "doc_to_choice": "{{choices.text}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 25,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "Otázka: {{question}}\nOdpověď:",
      "metadata": {
        "version": 1
      }
    },
    "ogx_arcx_easy_da": {
      "task": "ogx_arcx_easy_da",
      "group": [
        "ai2_arc",
        "arcx"
      ],
      "dataset_path": "openGPT-X/arcx",
      "dataset_name": "easy_DA",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "Spørgsmål: {{question}}\nSvar:",
      "doc_to_target": "{{choices.label.index(answerKey)}}",
      "doc_to_choice": "{{choices.text}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 25,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "Spørgsmål: {{question}}\nSvar:",
      "metadata": {
        "version": 1
      }
    },
    "ogx_arcx_easy_de": {
      "task": "ogx_arcx_easy_de",
      "group": [
        "ai2_arc",
        "arcx"
      ],
      "dataset_path": "openGPT-X/arcx",
      "dataset_name": "easy_DE",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "Frage: {{question}}\nAntwort:",
      "doc_to_target": "{{choices.label.index(answerKey)}}",
      "doc_to_choice": "{{choices.text}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 25,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "Frage: {{question}}\nAntwort:",
      "metadata": {
        "version": 1
      }
    },
    "ogx_arcx_easy_el": {
      "task": "ogx_arcx_easy_el",
      "group": [
        "ai2_arc",
        "arcx"
      ],
      "dataset_path": "openGPT-X/arcx",
      "dataset_name": "easy_EL",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "Ερώτηση: {{question}}\nΑπάντηση:",
      "doc_to_target": "{{choices.label.index(answerKey)}}",
      "doc_to_choice": "{{choices.text}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 25,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "Ερώτηση: {{question}}\nΑπάντηση:",
      "metadata": {
        "version": 1
      }
    },
    "ogx_arcx_easy_es": {
      "task": "ogx_arcx_easy_es",
      "group": [
        "ai2_arc",
        "arcx"
      ],
      "dataset_path": "openGPT-X/arcx",
      "dataset_name": "easy_ES",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "Pregunta: {{question}}\nRespuesta:",
      "doc_to_target": "{{choices.label.index(answerKey)}}",
      "doc_to_choice": "{{choices.text}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 25,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "Pregunta: {{question}}\nRespuesta:",
      "metadata": {
        "version": 1
      }
    },
    "ogx_arcx_easy_et": {
      "task": "ogx_arcx_easy_et",
      "group": [
        "ai2_arc",
        "arcx"
      ],
      "dataset_path": "openGPT-X/arcx",
      "dataset_name": "easy_ET",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "Küsimus: {{question}}\nVastus:",
      "doc_to_target": "{{choices.label.index(answerKey)}}",
      "doc_to_choice": "{{choices.text}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 25,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "Küsimus: {{question}}\nVastus:",
      "metadata": {
        "version": 1
      }
    },
    "ogx_arcx_easy_fi": {
      "task": "ogx_arcx_easy_fi",
      "group": [
        "ai2_arc",
        "arcx"
      ],
      "dataset_path": "openGPT-X/arcx",
      "dataset_name": "easy_FI",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "Kysymys: {{question}}\nVastaa:",
      "doc_to_target": "{{choices.label.index(answerKey)}}",
      "doc_to_choice": "{{choices.text}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 25,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "Kysymys: {{question}}\nVastaa:",
      "metadata": {
        "version": 1
      }
    },
    "ogx_arcx_easy_fr": {
      "task": "ogx_arcx_easy_fr",
      "group": [
        "ai2_arc",
        "arcx"
      ],
      "dataset_path": "openGPT-X/arcx",
      "dataset_name": "easy_FR",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "Question: {{question}}\nRéponse:",
      "doc_to_target": "{{choices.label.index(answerKey)}}",
      "doc_to_choice": "{{choices.text}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 25,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "Question: {{question}}\nRéponse:",
      "metadata": {
        "version": 1
      }
    },
    "ogx_arcx_easy_hu": {
      "task": "ogx_arcx_easy_hu",
      "group": [
        "ai2_arc",
        "arcx"
      ],
      "dataset_path": "openGPT-X/arcx",
      "dataset_name": "easy_HU",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "Kérdés: {{question}}\nVálasz:",
      "doc_to_target": "{{choices.label.index(answerKey)}}",
      "doc_to_choice": "{{choices.text}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 25,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "Kérdés: {{question}}\nVálasz:",
      "metadata": {
        "version": 1
      }
    },
    "ogx_arcx_easy_it": {
      "task": "ogx_arcx_easy_it",
      "group": [
        "ai2_arc",
        "arcx"
      ],
      "dataset_path": "openGPT-X/arcx",
      "dataset_name": "easy_IT",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "Domanda: {{question}}\nRisposta:",
      "doc_to_target": "{{choices.label.index(answerKey)}}",
      "doc_to_choice": "{{choices.text}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 25,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "Domanda: {{question}}\nRisposta:",
      "metadata": {
        "version": 1
      }
    },
    "ogx_arcx_easy_lt": {
      "task": "ogx_arcx_easy_lt",
      "group": [
        "ai2_arc",
        "arcx"
      ],
      "dataset_path": "openGPT-X/arcx",
      "dataset_name": "easy_LT",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "Klausimas: {{question}}\nAtsakymas:",
      "doc_to_target": "{{choices.label.index(answerKey)}}",
      "doc_to_choice": "{{choices.text}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 25,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "Klausimas: {{question}}\nAtsakymas:",
      "metadata": {
        "version": 1
      }
    },
    "ogx_arcx_easy_lv": {
      "task": "ogx_arcx_easy_lv",
      "group": [
        "ai2_arc",
        "arcx"
      ],
      "dataset_path": "openGPT-X/arcx",
      "dataset_name": "easy_LV",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "Jautājums: {{question}}\nAtbilde:",
      "doc_to_target": "{{choices.label.index(answerKey)}}",
      "doc_to_choice": "{{choices.text}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 25,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "Jautājums: {{question}}\nAtbilde:",
      "metadata": {
        "version": 1
      }
    },
    "ogx_arcx_easy_nl": {
      "task": "ogx_arcx_easy_nl",
      "group": [
        "ai2_arc",
        "arcx"
      ],
      "dataset_path": "openGPT-X/arcx",
      "dataset_name": "easy_NL",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "Vraag: {{question}}\nAntwoord:",
      "doc_to_target": "{{choices.label.index(answerKey)}}",
      "doc_to_choice": "{{choices.text}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 25,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "Vraag: {{question}}\nAntwoord:",
      "metadata": {
        "version": 1
      }
    },
    "ogx_arcx_easy_pl": {
      "task": "ogx_arcx_easy_pl",
      "group": [
        "ai2_arc",
        "arcx"
      ],
      "dataset_path": "openGPT-X/arcx",
      "dataset_name": "easy_PL",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "Pytanie: {{question}}\nOdpowiedź:",
      "doc_to_target": "{{choices.label.index(answerKey)}}",
      "doc_to_choice": "{{choices.text}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 25,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "Pytanie: {{question}}\nOdpowiedź:",
      "metadata": {
        "version": 1
      }
    },
    "ogx_arcx_easy_pt-pt": {
      "task": "ogx_arcx_easy_pt-pt",
      "group": [
        "ai2_arc",
        "arcx"
      ],
      "dataset_path": "openGPT-X/arcx",
      "dataset_name": "easy_PT-PT",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "Questão: {{question}}\nResposta:",
      "doc_to_target": "{{choices.label.index(answerKey)}}",
      "doc_to_choice": "{{choices.text}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 25,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "Questão: {{question}}\nResposta:",
      "metadata": {
        "version": 1
      }
    },
    "ogx_arcx_easy_ro": {
      "task": "ogx_arcx_easy_ro",
      "group": [
        "ai2_arc",
        "arcx"
      ],
      "dataset_path": "openGPT-X/arcx",
      "dataset_name": "easy_RO",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "Întrebare: {{question}}\nRăspuns:",
      "doc_to_target": "{{choices.label.index(answerKey)}}",
      "doc_to_choice": "{{choices.text}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 25,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "Întrebare: {{question}}\nRăspuns:",
      "metadata": {
        "version": 1
      }
    },
    "ogx_arcx_easy_sk": {
      "task": "ogx_arcx_easy_sk",
      "group": [
        "ai2_arc",
        "arcx"
      ],
      "dataset_path": "openGPT-X/arcx",
      "dataset_name": "easy_SK",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "Otázka: {{question}}\nOdpoveď:",
      "doc_to_target": "{{choices.label.index(answerKey)}}",
      "doc_to_choice": "{{choices.text}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 25,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "Otázka: {{question}}\nOdpoveď:",
      "metadata": {
        "version": 1
      }
    },
    "ogx_arcx_easy_sl": {
      "task": "ogx_arcx_easy_sl",
      "group": [
        "ai2_arc",
        "arcx"
      ],
      "dataset_path": "openGPT-X/arcx",
      "dataset_name": "easy_SL",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "Vprašanje: {{question}}\nOdgovor:",
      "doc_to_target": "{{choices.label.index(answerKey)}}",
      "doc_to_choice": "{{choices.text}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 25,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "Vprašanje: {{question}}\nOdgovor:",
      "metadata": {
        "version": 1
      }
    },
    "ogx_arcx_easy_sv": {
      "task": "ogx_arcx_easy_sv",
      "group": [
        "ai2_arc",
        "arcx"
      ],
      "dataset_path": "openGPT-X/arcx",
      "dataset_name": "easy_SV",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "Fråga: {{question}}\nSvar:",
      "doc_to_target": "{{choices.label.index(answerKey)}}",
      "doc_to_choice": "{{choices.text}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 25,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "Fråga: {{question}}\nSvar:",
      "metadata": {
        "version": 1
      }
    }
  },
  "versions": {
    "ogx_arcx_easy_bg": 1,
    "ogx_arcx_easy_cs": 1,
    "ogx_arcx_easy_da": 1,
    "ogx_arcx_easy_de": 1,
    "ogx_arcx_easy_el": 1,
    "ogx_arcx_easy_es": 1,
    "ogx_arcx_easy_et": 1,
    "ogx_arcx_easy_fi": 1,
    "ogx_arcx_easy_fr": 1,
    "ogx_arcx_easy_hu": 1,
    "ogx_arcx_easy_it": 1,
    "ogx_arcx_easy_lt": 1,
    "ogx_arcx_easy_lv": 1,
    "ogx_arcx_easy_nl": 1,
    "ogx_arcx_easy_pl": 1,
    "ogx_arcx_easy_pt-pt": 1,
    "ogx_arcx_easy_ro": 1,
    "ogx_arcx_easy_sk": 1,
    "ogx_arcx_easy_sl": 1,
    "ogx_arcx_easy_sv": 1
  },
  "n-shot": {
    "ogx_arcx_easy_bg": 25,
    "ogx_arcx_easy_cs": 25,
    "ogx_arcx_easy_da": 25,
    "ogx_arcx_easy_de": 25,
    "ogx_arcx_easy_el": 25,
    "ogx_arcx_easy_es": 25,
    "ogx_arcx_easy_et": 25,
    "ogx_arcx_easy_fi": 25,
    "ogx_arcx_easy_fr": 25,
    "ogx_arcx_easy_hu": 25,
    "ogx_arcx_easy_it": 25,
    "ogx_arcx_easy_lt": 25,
    "ogx_arcx_easy_lv": 25,
    "ogx_arcx_easy_nl": 25,
    "ogx_arcx_easy_pl": 25,
    "ogx_arcx_easy_pt-pt": 25,
    "ogx_arcx_easy_ro": 25,
    "ogx_arcx_easy_sk": 25,
    "ogx_arcx_easy_sl": 25,
    "ogx_arcx_easy_sv": 25
  },
  "higher_is_better": {
    "ogx_arcx_easy_bg": {
      "acc": true,
      "acc_norm": true
    },
    "ogx_arcx_easy_cs": {
      "acc": true,
      "acc_norm": true
    },
    "ogx_arcx_easy_da": {
      "acc": true,
      "acc_norm": true
    },
    "ogx_arcx_easy_de": {
      "acc": true,
      "acc_norm": true
    },
    "ogx_arcx_easy_el": {
      "acc": true,
      "acc_norm": true
    },
    "ogx_arcx_easy_es": {
      "acc": true,
      "acc_norm": true
    },
    "ogx_arcx_easy_et": {
      "acc": true,
      "acc_norm": true
    },
    "ogx_arcx_easy_fi": {
      "acc": true,
      "acc_norm": true
    },
    "ogx_arcx_easy_fr": {
      "acc": true,
      "acc_norm": true
    },
    "ogx_arcx_easy_hu": {
      "acc": true,
      "acc_norm": true
    },
    "ogx_arcx_easy_it": {
      "acc": true,
      "acc_norm": true
    },
    "ogx_arcx_easy_lt": {
      "acc": true,
      "acc_norm": true
    },
    "ogx_arcx_easy_lv": {
      "acc": true,
      "acc_norm": true
    },
    "ogx_arcx_easy_nl": {
      "acc": true,
      "acc_norm": true
    },
    "ogx_arcx_easy_pl": {
      "acc": true,
      "acc_norm": true
    },
    "ogx_arcx_easy_pt-pt": {
      "acc": true,
      "acc_norm": true
    },
    "ogx_arcx_easy_ro": {
      "acc": true,
      "acc_norm": true
    },
    "ogx_arcx_easy_sk": {
      "acc": true,
      "acc_norm": true
    },
    "ogx_arcx_easy_sl": {
      "acc": true,
      "acc_norm": true
    },
    "ogx_arcx_easy_sv": {
      "acc": true,
      "acc_norm": true
    }
  },
  "n-samples": {
    "ogx_arcx_easy_sv": {
      "original": 2376,
      "effective": 2376
    },
    "ogx_arcx_easy_sl": {
      "original": 2376,
      "effective": 2376
    },
    "ogx_arcx_easy_sk": {
      "original": 2376,
      "effective": 2376
    },
    "ogx_arcx_easy_ro": {
      "original": 2376,
      "effective": 2376
    },
    "ogx_arcx_easy_pt-pt": {
      "original": 2376,
      "effective": 2376
    },
    "ogx_arcx_easy_pl": {
      "original": 2376,
      "effective": 2376
    },
    "ogx_arcx_easy_nl": {
      "original": 2376,
      "effective": 2376
    },
    "ogx_arcx_easy_lv": {
      "original": 2376,
      "effective": 2376
    },
    "ogx_arcx_easy_lt": {
      "original": 2376,
      "effective": 2376
    },
    "ogx_arcx_easy_it": {
      "original": 2376,
      "effective": 2376
    },
    "ogx_arcx_easy_hu": {
      "original": 2376,
      "effective": 2376
    },
    "ogx_arcx_easy_fr": {
      "original": 2376,
      "effective": 2376
    },
    "ogx_arcx_easy_fi": {
      "original": 2376,
      "effective": 2376
    },
    "ogx_arcx_easy_et": {
      "original": 2376,
      "effective": 2376
    },
    "ogx_arcx_easy_es": {
      "original": 2376,
      "effective": 2376
    },
    "ogx_arcx_easy_el": {
      "original": 2376,
      "effective": 2376
    },
    "ogx_arcx_easy_de": {
      "original": 2376,
      "effective": 2376
    },
    "ogx_arcx_easy_da": {
      "original": 2376,
      "effective": 2376
    },
    "ogx_arcx_easy_cs": {
      "original": 2376,
      "effective": 2376
    },
    "ogx_arcx_easy_bg": {
      "original": 2376,
      "effective": 2376
    }
  },
  "config": {
    "model": "hf",
    "model_args": "pretrained=meta-llama/Llama-3.1-8B-Instruct,dtype=bfloat16,trust_remote_code=True,nccl_timeout=3600,trust_remote_code=True",
    "model_num_parameters": 8030261248,
    "model_dtype": "torch.bfloat16",
    "model_revision": "main",
    "model_sha": "0e9e39f249a16976918f6564b8830bc894c89659",
    "batch_size": "auto",
    "batch_sizes": [
      16
    ],
    "device": null,
    "use_cache": null,
    "limit": null,
    "bootstrap_iters": 100,
    "gen_kwargs": null,
    "random_seed": 0,
    "numpy_seed": 1234,
    "torch_seed": 1234,
    "fewshot_seed": 1234
  },
  "git_hash": "43468b99",
  "date": 1740599234.2124226,
  "pretty_env_info": "PyTorch version: 2.5.1+cu121\nIs debug build: False\nCUDA used to build PyTorch: 12.1\nROCM used to build PyTorch: N/A\n\nOS: Ubuntu 22.04.3 LTS (x86_64)\nGCC version: (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\nClang version: Could not collect\nCMake version: Could not collect\nLibc version: glibc-2.35\n\nPython version: 3.10.12 (main, Jan 17 2025, 14:35:34) [GCC 11.4.0] (64-bit runtime)\nPython platform: Linux-6.8.0-40-generic-x86_64-with-glibc2.35\nIs CUDA available: True\nCUDA runtime version: 12.1.105\nCUDA_MODULE_LOADING set to: LAZY\nGPU models and configuration: \nGPU 0: NVIDIA A100-SXM4-80GB\nGPU 1: NVIDIA A100-SXM4-80GB\nGPU 2: NVIDIA A100-SXM4-80GB\nGPU 3: NVIDIA A100-SXM4-80GB\n\nNvidia driver version: 560.28.03\ncuDNN version: Probably one of the following:\n/usr/lib/x86_64-linux-gnu/libcudnn.so.8.9.0\n/usr/lib/x86_64-linux-gnu/libcudnn_adv_infer.so.8.9.0\n/usr/lib/x86_64-linux-gnu/libcudnn_adv_train.so.8.9.0\n/usr/lib/x86_64-linux-gnu/libcudnn_cnn_infer.so.8.9.0\n/usr/lib/x86_64-linux-gnu/libcudnn_cnn_train.so.8.9.0\n/usr/lib/x86_64-linux-gnu/libcudnn_ops_infer.so.8.9.0\n/usr/lib/x86_64-linux-gnu/libcudnn_ops_train.so.8.9.0\nHIP runtime version: N/A\nMIOpen runtime version: N/A\nIs XNNPACK available: True\n\nCPU:\nArchitecture:                         x86_64\nCPU op-mode(s):                       32-bit, 64-bit\nAddress sizes:                        48 bits physical, 48 bits virtual\nByte Order:                           Little Endian\nCPU(s):                               192\nOn-line CPU(s) list:                  0-191\nVendor ID:                            AuthenticAMD\nModel name:                           AMD EPYC 7713 64-Core Processor\nCPU family:                           25\nModel:                                1\nThread(s) per core:                   1\nCore(s) per socket:                   1\nSocket(s):                            192\nStepping:                             1\nBogoMIPS:                             3992.49\nFlags:                                fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm rep_good nopl cpuid extd_apicid tsc_known_freq pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm cmp_legacy svm cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw perfctr_core ssbd ibrs ibpb stibp vmmcall fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid rdseed adx smap clflushopt clwb sha_ni xsaveopt xsavec xgetbv1 xsaves clzero xsaveerptr wbnoinvd arat npt lbrv nrip_save tsc_scale vmcb_clean pausefilter pfthreshold v_vmsave_vmload vgif umip pku ospke vaes vpclmulqdq rdpid fsrm arch_capabilities\nVirtualization:                       AMD-V\nHypervisor vendor:                    KVM\nVirtualization type:                  full\nL1d cache:                            12 MiB (192 instances)\nL1i cache:                            12 MiB (192 instances)\nL2 cache:                             96 MiB (192 instances)\nL3 cache:                             3 GiB (192 instances)\nNUMA node(s):                         1\nNUMA node0 CPU(s):                    0-191\nVulnerability Gather data sampling:   Not affected\nVulnerability Itlb multihit:          Not affected\nVulnerability L1tf:                   Not affected\nVulnerability Mds:                    Not affected\nVulnerability Meltdown:               Not affected\nVulnerability Mmio stale data:        Not affected\nVulnerability Reg file data sampling: Not affected\nVulnerability Retbleed:               Not affected\nVulnerability Spec rstack overflow:   Vulnerable: Safe RET, no microcode\nVulnerability Spec store bypass:      Mitigation; Speculative Store Bypass disabled via prctl\nVulnerability Spectre v1:             Mitigation; usercopy/swapgs barriers and __user pointer sanitization\nVulnerability Spectre v2:             Mitigation; Retpolines; IBPB conditional; IBRS_FW; STIBP disabled; RSB filling; PBRSB-eIBRS Not affected; BHI Not affected\nVulnerability Srbds:                  Not affected\nVulnerability Tsx async abort:        Not affected\n\nVersions of relevant libraries:\n[pip3] mypy-extensions==1.0.0\n[pip3] numpy==1.26.4\n[pip3] onnx==1.17.0\n[pip3] onnxruntime==1.20.1\n[pip3] onnxruntime-tools==1.7.0\n[pip3] torch==2.5.1+cu121\n[pip3] torchaudio==2.5.1+cu121\n[pip3] torchvision==0.20.1+cu121\n[pip3] triton==3.1.0\n[conda] Could not collect",
  "transformers_version": "4.49.0.dev0",
  "upper_git_hash": null,
  "tokenizer_pad_token": [
    "<|eot_id|>",
    128009
  ],
  "tokenizer_eos_token": [
    "<|eot_id|>",
    128009
  ],
  "tokenizer_bos_token": [
    "<|begin_of_text|>",
    128000
  ],
  "eot_token_id": 128009,
  "max_length": 131072,
  "task_hashes": {},
  "model_source": "hf",
  "model_name": "meta-llama/Llama-3.1-8B-Instruct",
  "model_name_sanitized": "meta-llama__Llama-3.1-8B-Instruct",
  "system_instruction": null,
  "system_instruction_sha": null,
  "fewshot_as_multiturn": true,
  "chat_template": "{{- bos_token }}\n{%- if custom_tools is defined %}\n    {%- set tools = custom_tools %}\n{%- endif %}\n{%- if not tools_in_user_message is defined %}\n    {%- set tools_in_user_message = true %}\n{%- endif %}\n{%- if not date_string is defined %}\n    {%- set date_string = \"26 Jul 2024\" %}\n{%- endif %}\n{%- if not tools is defined %}\n    {%- set tools = none %}\n{%- endif %}\n\n{#- This block extracts the system message, so we can slot it into the right place. #}\n{%- if messages[0]['role'] == 'system' %}\n    {%- set system_message = messages[0]['content']|trim %}\n    {%- set messages = messages[1:] %}\n{%- else %}\n    {%- set system_message = \"\" %}\n{%- endif %}\n\n{#- System message + builtin tools #}\n{{- \"<|start_header_id|>system<|end_header_id|>\\n\\n\" }}\n{%- if builtin_tools is defined or tools is not none %}\n    {{- \"Environment: ipython\\n\" }}\n{%- endif %}\n{%- if builtin_tools is defined %}\n    {{- \"Tools: \" + builtin_tools | reject('equalto', 'code_interpreter') | join(\", \") + \"\\n\\n\"}}\n{%- endif %}\n{{- \"Cutting Knowledge Date: December 2023\\n\" }}\n{{- \"Today Date: \" + date_string + \"\\n\\n\" }}\n{%- if tools is not none and not tools_in_user_message %}\n    {{- \"You have access to the following functions. To call a function, please respond with JSON for a function call.\" }}\n    {{- 'Respond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.' }}\n    {{- \"Do not use variables.\\n\\n\" }}\n    {%- for t in tools %}\n        {{- t | tojson(indent=4) }}\n        {{- \"\\n\\n\" }}\n    {%- endfor %}\n{%- endif %}\n{{- system_message }}\n{{- \"<|eot_id|>\" }}\n\n{#- Custom tools are passed in a user message with some extra guidance #}\n{%- if tools_in_user_message and not tools is none %}\n    {#- Extract the first user message so we can plug it in here #}\n    {%- if messages | length != 0 %}\n        {%- set first_user_message = messages[0]['content']|trim %}\n        {%- set messages = messages[1:] %}\n    {%- else %}\n        {{- raise_exception(\"Cannot put tools in the first user message when there's no first user message!\") }}\n{%- endif %}\n    {{- '<|start_header_id|>user<|end_header_id|>\\n\\n' -}}\n    {{- \"Given the following functions, please respond with a JSON for a function call \" }}\n    {{- \"with its proper arguments that best answers the given prompt.\\n\\n\" }}\n    {{- 'Respond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.' }}\n    {{- \"Do not use variables.\\n\\n\" }}\n    {%- for t in tools %}\n        {{- t | tojson(indent=4) }}\n        {{- \"\\n\\n\" }}\n    {%- endfor %}\n    {{- first_user_message + \"<|eot_id|>\"}}\n{%- endif %}\n\n{%- for message in messages %}\n    {%- if not (message.role == 'ipython' or message.role == 'tool' or 'tool_calls' in message) %}\n        {{- '<|start_header_id|>' + message['role'] + '<|end_header_id|>\\n\\n'+ message['content'] | trim + '<|eot_id|>' }}\n    {%- elif 'tool_calls' in message %}\n        {%- if not message.tool_calls|length == 1 %}\n            {{- raise_exception(\"This model only supports single tool-calls at once!\") }}\n        {%- endif %}\n        {%- set tool_call = message.tool_calls[0].function %}\n        {%- if builtin_tools is defined and tool_call.name in builtin_tools %}\n            {{- '<|start_header_id|>assistant<|end_header_id|>\\n\\n' -}}\n            {{- \"<|python_tag|>\" + tool_call.name + \".call(\" }}\n            {%- for arg_name, arg_val in tool_call.arguments | items %}\n                {{- arg_name + '=\"' + arg_val + '\"' }}\n                {%- if not loop.last %}\n                    {{- \", \" }}\n                {%- endif %}\n                {%- endfor %}\n            {{- \")\" }}\n        {%- else  %}\n            {{- '<|start_header_id|>assistant<|end_header_id|>\\n\\n' -}}\n            {{- '{\"name\": \"' + tool_call.name + '\", ' }}\n            {{- '\"parameters\": ' }}\n            {{- tool_call.arguments | tojson }}\n            {{- \"}\" }}\n        {%- endif %}\n        {%- if builtin_tools is defined %}\n            {#- This means we're in ipython mode #}\n            {{- \"<|eom_id|>\" }}\n        {%- else %}\n            {{- \"<|eot_id|>\" }}\n        {%- endif %}\n    {%- elif message.role == \"tool\" or message.role == \"ipython\" %}\n        {{- \"<|start_header_id|>ipython<|end_header_id|>\\n\\n\" }}\n        {%- if message.content is mapping or message.content is iterable %}\n            {{- message.content | tojson }}\n        {%- else %}\n            {{- message.content }}\n        {%- endif %}\n        {{- \"<|eot_id|>\" }}\n    {%- endif %}\n{%- endfor %}\n{%- if add_generation_prompt %}\n    {{- '<|start_header_id|>assistant<|end_header_id|>\\n\\n' }}\n{%- endif %}\n",
  "chat_template_sha": "e10ca381b1ccc5cf9db52e371f3b6651576caee0a630b452e2816b2d404d4b65",
  "start_time": 537688.916465011,
  "end_time": 545972.291605142,
  "total_evaluation_time_seconds": "8283.375140130986"
}