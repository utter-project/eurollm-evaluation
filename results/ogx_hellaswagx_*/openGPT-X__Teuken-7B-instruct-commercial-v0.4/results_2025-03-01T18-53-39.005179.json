{
  "results": {
    "ogx_hellaswagx_sv": {
      "acc,none": 0.48157737502489545,
      "acc_stderr,none": 0.004986393266269158,
      "acc_norm,none": 0.6278629755028878,
      "acc_norm_stderr,none": 0.0048238677613324675,
      "alias": "ogx_hellaswagx_sv"
    },
    "ogx_hellaswagx_sl": {
      "acc,none": 0.4313881696873133,
      "acc_stderr,none": 0.0049425785209873474,
      "acc_norm,none": 0.5689105755825533,
      "acc_norm_stderr,none": 0.004942164585991481,
      "alias": "ogx_hellaswagx_sl"
    },
    "ogx_hellaswagx_sk": {
      "acc,none": 0.4340768771161123,
      "acc_stderr,none": 0.004946221512145275,
      "acc_norm,none": 0.5763792073292173,
      "acc_norm_stderr,none": 0.004931219148182243,
      "alias": "ogx_hellaswagx_sk"
    },
    "ogx_hellaswagx_ro": {
      "acc,none": 0.45498904600677154,
      "acc_stderr,none": 0.004969521827957954,
      "acc_norm,none": 0.5956980681139216,
      "acc_norm_stderr,none": 0.004897534686686344,
      "alias": "ogx_hellaswagx_ro"
    },
    "ogx_hellaswagx_pt-pt": {
      "acc,none": 0.4702250547699661,
      "acc_stderr,none": 0.004980926198798973,
      "acc_norm,none": 0.6334395538737303,
      "acc_norm_stderr,none": 0.004808802114592811,
      "alias": "ogx_hellaswagx_pt-pt"
    },
    "ogx_hellaswagx_pl": {
      "acc,none": 0.44343756223859787,
      "acc_stderr,none": 0.004957750897152961,
      "acc_norm,none": 0.5914160525791675,
      "acc_norm_stderr,none": 0.004905674408614002,
      "alias": "ogx_hellaswagx_pl"
    },
    "ogx_hellaswagx_nl": {
      "acc,none": 0.4623580959968134,
      "acc_stderr,none": 0.004975621147406105,
      "acc_norm,none": 0.6218880701055567,
      "acc_norm_stderr,none": 0.004839247332606049,
      "alias": "ogx_hellaswagx_nl"
    },
    "ogx_hellaswagx_lv": {
      "acc,none": 0.4144592710615415,
      "acc_stderr,none": 0.004916216503770339,
      "acc_norm,none": 0.5407289384584744,
      "acc_norm_stderr,none": 0.004973199296339952,
      "alias": "ogx_hellaswagx_lv"
    },
    "ogx_hellaswagx_lt": {
      "acc,none": 0.42033459470225054,
      "acc_stderr,none": 0.004926038197714533,
      "acc_norm,none": 0.5515833499302928,
      "acc_norm_stderr,none": 0.004963156337010774,
      "alias": "ogx_hellaswagx_lt"
    },
    "ogx_hellaswagx_it": {
      "acc,none": 0.4736999402271369,
      "acc_stderr,none": 0.004983866637156731,
      "acc_norm,none": 0.6331938633193863,
      "acc_norm_stderr,none": 0.0048104386798217755,
      "alias": "ogx_hellaswagx_it"
    },
    "ogx_hellaswagx_hu": {
      "acc,none": 0.4186417048396734,
      "acc_stderr,none": 0.004923281841828515,
      "acc_norm,none": 0.5578570005974905,
      "acc_norm_stderr,none": 0.0049562629193243965,
      "alias": "ogx_hellaswagx_hu"
    },
    "ogx_hellaswagx_fr": {
      "acc,none": 0.4946204423191871,
      "acc_stderr,none": 0.004990486718994137,
      "acc_norm,none": 0.6572026300059773,
      "acc_norm_stderr,none": 0.004737687651173519,
      "alias": "ogx_hellaswagx_fr"
    },
    "ogx_hellaswagx_fi": {
      "acc,none": 0.4307906791475802,
      "acc_stderr,none": 0.004941748817682304,
      "acc_norm,none": 0.5683130850428202,
      "acc_norm_stderr,none": 0.004942990623131125,
      "alias": "ogx_hellaswagx_fi"
    },
    "ogx_hellaswagx_et": {
      "acc,none": 0.395538737303326,
      "acc_stderr,none": 0.004879667889198497,
      "acc_norm,none": 0.5244971121290579,
      "acc_norm_stderr,none": 0.004983788992681211,
      "alias": "ogx_hellaswagx_et"
    },
    "ogx_hellaswagx_es": {
      "acc,none": 0.4771866905758119,
      "acc_stderr,none": 0.004985578014153168,
      "acc_norm,none": 0.6445507073122135,
      "acc_norm_stderr,none": 0.004777661865997101,
      "alias": "ogx_hellaswagx_es"
    },
    "ogx_hellaswagx_el": {
      "acc,none": 0.45120493925512845,
      "acc_stderr,none": 0.004965963647210313,
      "acc_norm,none": 0.5915156343357897,
      "acc_norm_stderr,none": 0.00490548949400508,
      "alias": "ogx_hellaswagx_el"
    },
    "ogx_hellaswagx_de": {
      "acc,none": 0.47309349634231884,
      "acc_stderr,none": 0.00499825626098987,
      "acc_norm,none": 0.6234091592343922,
      "acc_norm_stderr,none": 0.004850647509402892,
      "alias": "ogx_hellaswagx_de"
    },
    "ogx_hellaswagx_da": {
      "acc,none": 0.47390957976498704,
      "acc_stderr,none": 0.004982983592459195,
      "acc_norm,none": 0.622087233618801,
      "acc_norm_stderr,none": 0.004838747305783325,
      "alias": "ogx_hellaswagx_da"
    },
    "ogx_hellaswagx_cs": {
      "acc,none": 0.4441346345349532,
      "acc_stderr,none": 0.004958537988993586,
      "acc_norm,none": 0.5891256721768572,
      "acc_norm_stderr,none": 0.004909870006388833,
      "alias": "ogx_hellaswagx_cs"
    },
    "ogx_hellaswagx_bg": {
      "acc,none": 0.45130452101175067,
      "acc_stderr,none": 0.004966060995315063,
      "acc_norm,none": 0.5967934674367655,
      "acc_norm_stderr,none": 0.004895390341445628,
      "alias": "ogx_hellaswagx_bg"
    }
  },
  "group_subtasks": {
    "ogx_hellaswagx_bg": [],
    "ogx_hellaswagx_cs": [],
    "ogx_hellaswagx_da": [],
    "ogx_hellaswagx_de": [],
    "ogx_hellaswagx_el": [],
    "ogx_hellaswagx_es": [],
    "ogx_hellaswagx_et": [],
    "ogx_hellaswagx_fi": [],
    "ogx_hellaswagx_fr": [],
    "ogx_hellaswagx_hu": [],
    "ogx_hellaswagx_it": [],
    "ogx_hellaswagx_lt": [],
    "ogx_hellaswagx_lv": [],
    "ogx_hellaswagx_nl": [],
    "ogx_hellaswagx_pl": [],
    "ogx_hellaswagx_pt-pt": [],
    "ogx_hellaswagx_ro": [],
    "ogx_hellaswagx_sk": [],
    "ogx_hellaswagx_sl": [],
    "ogx_hellaswagx_sv": []
  },
  "configs": {
    "ogx_hellaswagx_bg": {
      "task": "ogx_hellaswagx_bg",
      "group": [
        "multiple_choice",
        "hellaswagx"
      ],
      "dataset_path": "openGPT-X/hellaswagx",
      "dataset_name": "BG",
      "training_split": "train",
      "validation_split": "validation",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc):\n        ctx = doc[\"ctx_a\"] + \" \" + doc[\"ctx_b\"].capitalize()\n        out_doc = {\n            \"query\": preprocess(doc[\"activity_label\"] + \": \" + ctx),\n            \"choices\": [preprocess(ending) for ending in doc[\"endings\"]],\n            \"gold\": int(doc[\"label\"]),\n        }\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "{{query}}",
      "doc_to_target": "{{label}}",
      "doc_to_choice": "choices",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 10,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1
      }
    },
    "ogx_hellaswagx_cs": {
      "task": "ogx_hellaswagx_cs",
      "group": [
        "multiple_choice",
        "hellaswagx"
      ],
      "dataset_path": "openGPT-X/hellaswagx",
      "dataset_name": "CS",
      "training_split": "train",
      "validation_split": "validation",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc):\n        ctx = doc[\"ctx_a\"] + \" \" + doc[\"ctx_b\"].capitalize()\n        out_doc = {\n            \"query\": preprocess(doc[\"activity_label\"] + \": \" + ctx),\n            \"choices\": [preprocess(ending) for ending in doc[\"endings\"]],\n            \"gold\": int(doc[\"label\"]),\n        }\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "{{query}}",
      "doc_to_target": "{{label}}",
      "doc_to_choice": "choices",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 10,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1
      }
    },
    "ogx_hellaswagx_da": {
      "task": "ogx_hellaswagx_da",
      "group": [
        "multiple_choice",
        "hellaswagx"
      ],
      "dataset_path": "openGPT-X/hellaswagx",
      "dataset_name": "DA",
      "training_split": "train",
      "validation_split": "validation",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc):\n        ctx = doc[\"ctx_a\"] + \" \" + doc[\"ctx_b\"].capitalize()\n        out_doc = {\n            \"query\": preprocess(doc[\"activity_label\"] + \": \" + ctx),\n            \"choices\": [preprocess(ending) for ending in doc[\"endings\"]],\n            \"gold\": int(doc[\"label\"]),\n        }\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "{{query}}",
      "doc_to_target": "{{label}}",
      "doc_to_choice": "choices",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 10,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1
      }
    },
    "ogx_hellaswagx_de": {
      "task": "ogx_hellaswagx_de",
      "group": [
        "multiple_choice",
        "hellaswagx"
      ],
      "dataset_path": "openGPT-X/hellaswagx",
      "dataset_name": "DE",
      "training_split": "train",
      "validation_split": "validation",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc):\n        ctx = doc[\"ctx_a\"] + \" \" + doc[\"ctx_b\"].capitalize()\n        out_doc = {\n            \"query\": preprocess(doc[\"activity_label\"] + \": \" + ctx),\n            \"choices\": [preprocess(ending) for ending in doc[\"endings\"]],\n            \"gold\": int(doc[\"label\"]),\n        }\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "{{query}}",
      "doc_to_target": "{{label}}",
      "doc_to_choice": "choices",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 10,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1
      }
    },
    "ogx_hellaswagx_el": {
      "task": "ogx_hellaswagx_el",
      "group": [
        "multiple_choice",
        "hellaswagx"
      ],
      "dataset_path": "openGPT-X/hellaswagx",
      "dataset_name": "EL",
      "training_split": "train",
      "validation_split": "validation",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc):\n        ctx = doc[\"ctx_a\"] + \" \" + doc[\"ctx_b\"].capitalize()\n        out_doc = {\n            \"query\": preprocess(doc[\"activity_label\"] + \": \" + ctx),\n            \"choices\": [preprocess(ending) for ending in doc[\"endings\"]],\n            \"gold\": int(doc[\"label\"]),\n        }\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "{{query}}",
      "doc_to_target": "{{label}}",
      "doc_to_choice": "choices",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 10,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1
      }
    },
    "ogx_hellaswagx_es": {
      "task": "ogx_hellaswagx_es",
      "group": [
        "multiple_choice",
        "hellaswagx"
      ],
      "dataset_path": "openGPT-X/hellaswagx",
      "dataset_name": "ES",
      "training_split": "train",
      "validation_split": "validation",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc):\n        ctx = doc[\"ctx_a\"] + \" \" + doc[\"ctx_b\"].capitalize()\n        out_doc = {\n            \"query\": preprocess(doc[\"activity_label\"] + \": \" + ctx),\n            \"choices\": [preprocess(ending) for ending in doc[\"endings\"]],\n            \"gold\": int(doc[\"label\"]),\n        }\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "{{query}}",
      "doc_to_target": "{{label}}",
      "doc_to_choice": "choices",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 10,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1
      }
    },
    "ogx_hellaswagx_et": {
      "task": "ogx_hellaswagx_et",
      "group": [
        "multiple_choice",
        "hellaswagx"
      ],
      "dataset_path": "openGPT-X/hellaswagx",
      "dataset_name": "ET",
      "training_split": "train",
      "validation_split": "validation",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc):\n        ctx = doc[\"ctx_a\"] + \" \" + doc[\"ctx_b\"].capitalize()\n        out_doc = {\n            \"query\": preprocess(doc[\"activity_label\"] + \": \" + ctx),\n            \"choices\": [preprocess(ending) for ending in doc[\"endings\"]],\n            \"gold\": int(doc[\"label\"]),\n        }\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "{{query}}",
      "doc_to_target": "{{label}}",
      "doc_to_choice": "choices",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 10,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1
      }
    },
    "ogx_hellaswagx_fi": {
      "task": "ogx_hellaswagx_fi",
      "group": [
        "multiple_choice",
        "hellaswagx"
      ],
      "dataset_path": "openGPT-X/hellaswagx",
      "dataset_name": "FI",
      "training_split": "train",
      "validation_split": "validation",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc):\n        ctx = doc[\"ctx_a\"] + \" \" + doc[\"ctx_b\"].capitalize()\n        out_doc = {\n            \"query\": preprocess(doc[\"activity_label\"] + \": \" + ctx),\n            \"choices\": [preprocess(ending) for ending in doc[\"endings\"]],\n            \"gold\": int(doc[\"label\"]),\n        }\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "{{query}}",
      "doc_to_target": "{{label}}",
      "doc_to_choice": "choices",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 10,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1
      }
    },
    "ogx_hellaswagx_fr": {
      "task": "ogx_hellaswagx_fr",
      "group": [
        "multiple_choice",
        "hellaswagx"
      ],
      "dataset_path": "openGPT-X/hellaswagx",
      "dataset_name": "FR",
      "training_split": "train",
      "validation_split": "validation",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc):\n        ctx = doc[\"ctx_a\"] + \" \" + doc[\"ctx_b\"].capitalize()\n        out_doc = {\n            \"query\": preprocess(doc[\"activity_label\"] + \": \" + ctx),\n            \"choices\": [preprocess(ending) for ending in doc[\"endings\"]],\n            \"gold\": int(doc[\"label\"]),\n        }\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "{{query}}",
      "doc_to_target": "{{label}}",
      "doc_to_choice": "choices",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 10,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1
      }
    },
    "ogx_hellaswagx_hu": {
      "task": "ogx_hellaswagx_hu",
      "group": [
        "multiple_choice",
        "hellaswagx"
      ],
      "dataset_path": "openGPT-X/hellaswagx",
      "dataset_name": "HU",
      "training_split": "train",
      "validation_split": "validation",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc):\n        ctx = doc[\"ctx_a\"] + \" \" + doc[\"ctx_b\"].capitalize()\n        out_doc = {\n            \"query\": preprocess(doc[\"activity_label\"] + \": \" + ctx),\n            \"choices\": [preprocess(ending) for ending in doc[\"endings\"]],\n            \"gold\": int(doc[\"label\"]),\n        }\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "{{query}}",
      "doc_to_target": "{{label}}",
      "doc_to_choice": "choices",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 10,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1
      }
    },
    "ogx_hellaswagx_it": {
      "task": "ogx_hellaswagx_it",
      "group": [
        "multiple_choice",
        "hellaswagx"
      ],
      "dataset_path": "openGPT-X/hellaswagx",
      "dataset_name": "IT",
      "training_split": "train",
      "validation_split": "validation",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc):\n        ctx = doc[\"ctx_a\"] + \" \" + doc[\"ctx_b\"].capitalize()\n        out_doc = {\n            \"query\": preprocess(doc[\"activity_label\"] + \": \" + ctx),\n            \"choices\": [preprocess(ending) for ending in doc[\"endings\"]],\n            \"gold\": int(doc[\"label\"]),\n        }\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "{{query}}",
      "doc_to_target": "{{label}}",
      "doc_to_choice": "choices",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 10,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1
      }
    },
    "ogx_hellaswagx_lt": {
      "task": "ogx_hellaswagx_lt",
      "group": [
        "multiple_choice",
        "hellaswagx"
      ],
      "dataset_path": "openGPT-X/hellaswagx",
      "dataset_name": "LT",
      "training_split": "train",
      "validation_split": "validation",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc):\n        ctx = doc[\"ctx_a\"] + \" \" + doc[\"ctx_b\"].capitalize()\n        out_doc = {\n            \"query\": preprocess(doc[\"activity_label\"] + \": \" + ctx),\n            \"choices\": [preprocess(ending) for ending in doc[\"endings\"]],\n            \"gold\": int(doc[\"label\"]),\n        }\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "{{query}}",
      "doc_to_target": "{{label}}",
      "doc_to_choice": "choices",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 10,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1
      }
    },
    "ogx_hellaswagx_lv": {
      "task": "ogx_hellaswagx_lv",
      "group": [
        "multiple_choice",
        "hellaswagx"
      ],
      "dataset_path": "openGPT-X/hellaswagx",
      "dataset_name": "LV",
      "training_split": "train",
      "validation_split": "validation",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc):\n        ctx = doc[\"ctx_a\"] + \" \" + doc[\"ctx_b\"].capitalize()\n        out_doc = {\n            \"query\": preprocess(doc[\"activity_label\"] + \": \" + ctx),\n            \"choices\": [preprocess(ending) for ending in doc[\"endings\"]],\n            \"gold\": int(doc[\"label\"]),\n        }\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "{{query}}",
      "doc_to_target": "{{label}}",
      "doc_to_choice": "choices",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 10,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1
      }
    },
    "ogx_hellaswagx_nl": {
      "task": "ogx_hellaswagx_nl",
      "group": [
        "multiple_choice",
        "hellaswagx"
      ],
      "dataset_path": "openGPT-X/hellaswagx",
      "dataset_name": "NL",
      "training_split": "train",
      "validation_split": "validation",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc):\n        ctx = doc[\"ctx_a\"] + \" \" + doc[\"ctx_b\"].capitalize()\n        out_doc = {\n            \"query\": preprocess(doc[\"activity_label\"] + \": \" + ctx),\n            \"choices\": [preprocess(ending) for ending in doc[\"endings\"]],\n            \"gold\": int(doc[\"label\"]),\n        }\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "{{query}}",
      "doc_to_target": "{{label}}",
      "doc_to_choice": "choices",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 10,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1
      }
    },
    "ogx_hellaswagx_pl": {
      "task": "ogx_hellaswagx_pl",
      "group": [
        "multiple_choice",
        "hellaswagx"
      ],
      "dataset_path": "openGPT-X/hellaswagx",
      "dataset_name": "PL",
      "training_split": "train",
      "validation_split": "validation",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc):\n        ctx = doc[\"ctx_a\"] + \" \" + doc[\"ctx_b\"].capitalize()\n        out_doc = {\n            \"query\": preprocess(doc[\"activity_label\"] + \": \" + ctx),\n            \"choices\": [preprocess(ending) for ending in doc[\"endings\"]],\n            \"gold\": int(doc[\"label\"]),\n        }\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "{{query}}",
      "doc_to_target": "{{label}}",
      "doc_to_choice": "choices",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 10,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1
      }
    },
    "ogx_hellaswagx_pt-pt": {
      "task": "ogx_hellaswagx_pt-pt",
      "group": [
        "multiple_choice",
        "hellaswagx"
      ],
      "dataset_path": "openGPT-X/hellaswagx",
      "dataset_name": "PT-PT",
      "training_split": "train",
      "validation_split": "validation",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc):\n        ctx = doc[\"ctx_a\"] + \" \" + doc[\"ctx_b\"].capitalize()\n        out_doc = {\n            \"query\": preprocess(doc[\"activity_label\"] + \": \" + ctx),\n            \"choices\": [preprocess(ending) for ending in doc[\"endings\"]],\n            \"gold\": int(doc[\"label\"]),\n        }\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "{{query}}",
      "doc_to_target": "{{label}}",
      "doc_to_choice": "choices",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 10,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1
      }
    },
    "ogx_hellaswagx_ro": {
      "task": "ogx_hellaswagx_ro",
      "group": [
        "multiple_choice",
        "hellaswagx"
      ],
      "dataset_path": "openGPT-X/hellaswagx",
      "dataset_name": "RO",
      "training_split": "train",
      "validation_split": "validation",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc):\n        ctx = doc[\"ctx_a\"] + \" \" + doc[\"ctx_b\"].capitalize()\n        out_doc = {\n            \"query\": preprocess(doc[\"activity_label\"] + \": \" + ctx),\n            \"choices\": [preprocess(ending) for ending in doc[\"endings\"]],\n            \"gold\": int(doc[\"label\"]),\n        }\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "{{query}}",
      "doc_to_target": "{{label}}",
      "doc_to_choice": "choices",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 10,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1
      }
    },
    "ogx_hellaswagx_sk": {
      "task": "ogx_hellaswagx_sk",
      "group": [
        "multiple_choice",
        "hellaswagx"
      ],
      "dataset_path": "openGPT-X/hellaswagx",
      "dataset_name": "SK",
      "training_split": "train",
      "validation_split": "validation",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc):\n        ctx = doc[\"ctx_a\"] + \" \" + doc[\"ctx_b\"].capitalize()\n        out_doc = {\n            \"query\": preprocess(doc[\"activity_label\"] + \": \" + ctx),\n            \"choices\": [preprocess(ending) for ending in doc[\"endings\"]],\n            \"gold\": int(doc[\"label\"]),\n        }\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "{{query}}",
      "doc_to_target": "{{label}}",
      "doc_to_choice": "choices",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 10,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1
      }
    },
    "ogx_hellaswagx_sl": {
      "task": "ogx_hellaswagx_sl",
      "group": [
        "multiple_choice",
        "hellaswagx"
      ],
      "dataset_path": "openGPT-X/hellaswagx",
      "dataset_name": "SL",
      "training_split": "train",
      "validation_split": "validation",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc):\n        ctx = doc[\"ctx_a\"] + \" \" + doc[\"ctx_b\"].capitalize()\n        out_doc = {\n            \"query\": preprocess(doc[\"activity_label\"] + \": \" + ctx),\n            \"choices\": [preprocess(ending) for ending in doc[\"endings\"]],\n            \"gold\": int(doc[\"label\"]),\n        }\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "{{query}}",
      "doc_to_target": "{{label}}",
      "doc_to_choice": "choices",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 10,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1
      }
    },
    "ogx_hellaswagx_sv": {
      "task": "ogx_hellaswagx_sv",
      "group": [
        "multiple_choice",
        "hellaswagx"
      ],
      "dataset_path": "openGPT-X/hellaswagx",
      "dataset_name": "SV",
      "training_split": "train",
      "validation_split": "validation",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc):\n        ctx = doc[\"ctx_a\"] + \" \" + doc[\"ctx_b\"].capitalize()\n        out_doc = {\n            \"query\": preprocess(doc[\"activity_label\"] + \": \" + ctx),\n            \"choices\": [preprocess(ending) for ending in doc[\"endings\"]],\n            \"gold\": int(doc[\"label\"]),\n        }\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "{{query}}",
      "doc_to_target": "{{label}}",
      "doc_to_choice": "choices",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 10,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1
      }
    }
  },
  "versions": {
    "ogx_hellaswagx_bg": 1,
    "ogx_hellaswagx_cs": 1,
    "ogx_hellaswagx_da": 1,
    "ogx_hellaswagx_de": 1,
    "ogx_hellaswagx_el": 1,
    "ogx_hellaswagx_es": 1,
    "ogx_hellaswagx_et": 1,
    "ogx_hellaswagx_fi": 1,
    "ogx_hellaswagx_fr": 1,
    "ogx_hellaswagx_hu": 1,
    "ogx_hellaswagx_it": 1,
    "ogx_hellaswagx_lt": 1,
    "ogx_hellaswagx_lv": 1,
    "ogx_hellaswagx_nl": 1,
    "ogx_hellaswagx_pl": 1,
    "ogx_hellaswagx_pt-pt": 1,
    "ogx_hellaswagx_ro": 1,
    "ogx_hellaswagx_sk": 1,
    "ogx_hellaswagx_sl": 1,
    "ogx_hellaswagx_sv": 1
  },
  "n-shot": {
    "ogx_hellaswagx_bg": 10,
    "ogx_hellaswagx_cs": 10,
    "ogx_hellaswagx_da": 10,
    "ogx_hellaswagx_de": 10,
    "ogx_hellaswagx_el": 10,
    "ogx_hellaswagx_es": 10,
    "ogx_hellaswagx_et": 10,
    "ogx_hellaswagx_fi": 10,
    "ogx_hellaswagx_fr": 10,
    "ogx_hellaswagx_hu": 10,
    "ogx_hellaswagx_it": 10,
    "ogx_hellaswagx_lt": 10,
    "ogx_hellaswagx_lv": 10,
    "ogx_hellaswagx_nl": 10,
    "ogx_hellaswagx_pl": 10,
    "ogx_hellaswagx_pt-pt": 10,
    "ogx_hellaswagx_ro": 10,
    "ogx_hellaswagx_sk": 10,
    "ogx_hellaswagx_sl": 10,
    "ogx_hellaswagx_sv": 10
  },
  "higher_is_better": {
    "ogx_hellaswagx_bg": {
      "acc": true,
      "acc_norm": true
    },
    "ogx_hellaswagx_cs": {
      "acc": true,
      "acc_norm": true
    },
    "ogx_hellaswagx_da": {
      "acc": true,
      "acc_norm": true
    },
    "ogx_hellaswagx_de": {
      "acc": true,
      "acc_norm": true
    },
    "ogx_hellaswagx_el": {
      "acc": true,
      "acc_norm": true
    },
    "ogx_hellaswagx_es": {
      "acc": true,
      "acc_norm": true
    },
    "ogx_hellaswagx_et": {
      "acc": true,
      "acc_norm": true
    },
    "ogx_hellaswagx_fi": {
      "acc": true,
      "acc_norm": true
    },
    "ogx_hellaswagx_fr": {
      "acc": true,
      "acc_norm": true
    },
    "ogx_hellaswagx_hu": {
      "acc": true,
      "acc_norm": true
    },
    "ogx_hellaswagx_it": {
      "acc": true,
      "acc_norm": true
    },
    "ogx_hellaswagx_lt": {
      "acc": true,
      "acc_norm": true
    },
    "ogx_hellaswagx_lv": {
      "acc": true,
      "acc_norm": true
    },
    "ogx_hellaswagx_nl": {
      "acc": true,
      "acc_norm": true
    },
    "ogx_hellaswagx_pl": {
      "acc": true,
      "acc_norm": true
    },
    "ogx_hellaswagx_pt-pt": {
      "acc": true,
      "acc_norm": true
    },
    "ogx_hellaswagx_ro": {
      "acc": true,
      "acc_norm": true
    },
    "ogx_hellaswagx_sk": {
      "acc": true,
      "acc_norm": true
    },
    "ogx_hellaswagx_sl": {
      "acc": true,
      "acc_norm": true
    },
    "ogx_hellaswagx_sv": {
      "acc": true,
      "acc_norm": true
    }
  },
  "n-samples": {
    "ogx_hellaswagx_sv": {
      "original": 10042,
      "effective": 10042
    },
    "ogx_hellaswagx_sl": {
      "original": 10042,
      "effective": 10042
    },
    "ogx_hellaswagx_sk": {
      "original": 10042,
      "effective": 10042
    },
    "ogx_hellaswagx_ro": {
      "original": 10042,
      "effective": 10042
    },
    "ogx_hellaswagx_pt-pt": {
      "original": 10042,
      "effective": 10042
    },
    "ogx_hellaswagx_pl": {
      "original": 10042,
      "effective": 10042
    },
    "ogx_hellaswagx_nl": {
      "original": 10042,
      "effective": 10042
    },
    "ogx_hellaswagx_lv": {
      "original": 10042,
      "effective": 10042
    },
    "ogx_hellaswagx_lt": {
      "original": 10042,
      "effective": 10042
    },
    "ogx_hellaswagx_it": {
      "original": 10038,
      "effective": 10038
    },
    "ogx_hellaswagx_hu": {
      "original": 10042,
      "effective": 10042
    },
    "ogx_hellaswagx_fr": {
      "original": 10038,
      "effective": 10038
    },
    "ogx_hellaswagx_fi": {
      "original": 10042,
      "effective": 10042
    },
    "ogx_hellaswagx_et": {
      "original": 10042,
      "effective": 10042
    },
    "ogx_hellaswagx_es": {
      "original": 10038,
      "effective": 10038
    },
    "ogx_hellaswagx_el": {
      "original": 10042,
      "effective": 10042
    },
    "ogx_hellaswagx_de": {
      "original": 9979,
      "effective": 9979
    },
    "ogx_hellaswagx_da": {
      "original": 10042,
      "effective": 10042
    },
    "ogx_hellaswagx_cs": {
      "original": 10042,
      "effective": 10042
    },
    "ogx_hellaswagx_bg": {
      "original": 10042,
      "effective": 10042
    }
  },
  "config": {
    "model": "hf",
    "model_args": "pretrained=openGPT-X/Teuken-7B-instruct-commercial-v0.4,dtype=bfloat16,trust_remote_code=True,nccl_timeout=3600,trust_remote_code=True",
    "model_num_parameters": 7452725248,
    "model_dtype": "torch.bfloat16",
    "model_revision": "main",
    "model_sha": "e91cc26f0a5b1082c1375fd161ccb8cc0a05b291",
    "batch_size": "auto",
    "batch_sizes": [
      16
    ],
    "device": null,
    "use_cache": null,
    "limit": null,
    "bootstrap_iters": 100,
    "gen_kwargs": null,
    "random_seed": 0,
    "numpy_seed": 1234,
    "torch_seed": 1234,
    "fewshot_seed": 1234
  },
  "git_hash": "43468b99",
  "date": 1740834064.4518416,
  "pretty_env_info": "PyTorch version: 2.6.0+cu124\nIs debug build: False\nCUDA used to build PyTorch: 12.4\nROCM used to build PyTorch: N/A\n\nOS: Ubuntu 22.04.3 LTS (x86_64)\nGCC version: (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\nClang version: Could not collect\nCMake version: Could not collect\nLibc version: glibc-2.35\n\nPython version: 3.10.12 (main, Feb  4 2025, 14:57:36) [GCC 11.4.0] (64-bit runtime)\nPython platform: Linux-6.8.0-41-generic-x86_64-with-glibc2.35\nIs CUDA available: True\nCUDA runtime version: 12.1.105\nCUDA_MODULE_LOADING set to: LAZY\nGPU models and configuration: \nGPU 0: NVIDIA A100-SXM4-80GB\nGPU 1: NVIDIA A100-SXM4-80GB\nGPU 2: NVIDIA A100-SXM4-80GB\nGPU 3: NVIDIA A100-SXM4-80GB\n\nNvidia driver version: 560.35.03\ncuDNN version: Probably one of the following:\n/usr/lib/x86_64-linux-gnu/libcudnn.so.8.9.0\n/usr/lib/x86_64-linux-gnu/libcudnn_adv_infer.so.8.9.0\n/usr/lib/x86_64-linux-gnu/libcudnn_adv_train.so.8.9.0\n/usr/lib/x86_64-linux-gnu/libcudnn_cnn_infer.so.8.9.0\n/usr/lib/x86_64-linux-gnu/libcudnn_cnn_train.so.8.9.0\n/usr/lib/x86_64-linux-gnu/libcudnn_ops_infer.so.8.9.0\n/usr/lib/x86_64-linux-gnu/libcudnn_ops_train.so.8.9.0\nHIP runtime version: N/A\nMIOpen runtime version: N/A\nIs XNNPACK available: True\n\nCPU:\nArchitecture:                         x86_64\nCPU op-mode(s):                       32-bit, 64-bit\nAddress sizes:                        48 bits physical, 48 bits virtual\nByte Order:                           Little Endian\nCPU(s):                               112\nOn-line CPU(s) list:                  0-111\nVendor ID:                            AuthenticAMD\nModel name:                           AMD EPYC 7713P 64-Core Processor\nCPU family:                           25\nModel:                                1\nThread(s) per core:                   1\nCore(s) per socket:                   1\nSocket(s):                            112\nStepping:                             1\nBogoMIPS:                             3992.50\nFlags:                                fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm rep_good nopl cpuid extd_apicid tsc_known_freq pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm cmp_legacy svm cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw perfctr_core ssbd ibrs ibpb stibp vmmcall fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid rdseed adx smap clflushopt clwb sha_ni xsaveopt xsavec xgetbv1 xsaves clzero xsaveerptr wbnoinvd arat npt lbrv nrip_save tsc_scale vmcb_clean pausefilter pfthreshold v_vmsave_vmload vgif umip pku ospke vaes vpclmulqdq rdpid fsrm arch_capabilities\nVirtualization:                       AMD-V\nHypervisor vendor:                    KVM\nVirtualization type:                  full\nL1d cache:                            7 MiB (112 instances)\nL1i cache:                            7 MiB (112 instances)\nL2 cache:                             56 MiB (112 instances)\nL3 cache:                             1.8 GiB (112 instances)\nNUMA node(s):                         1\nNUMA node0 CPU(s):                    0-111\nVulnerability Gather data sampling:   Not affected\nVulnerability Itlb multihit:          Not affected\nVulnerability L1tf:                   Not affected\nVulnerability Mds:                    Not affected\nVulnerability Meltdown:               Not affected\nVulnerability Mmio stale data:        Not affected\nVulnerability Reg file data sampling: Not affected\nVulnerability Retbleed:               Not affected\nVulnerability Spec rstack overflow:   Vulnerable: Safe RET, no microcode\nVulnerability Spec store bypass:      Mitigation; Speculative Store Bypass disabled via prctl\nVulnerability Spectre v1:             Mitigation; usercopy/swapgs barriers and __user pointer sanitization\nVulnerability Spectre v2:             Mitigation; Retpolines; IBPB conditional; IBRS_FW; STIBP disabled; RSB filling; PBRSB-eIBRS Not affected; BHI Not affected\nVulnerability Srbds:                  Not affected\nVulnerability Tsx async abort:        Not affected\n\nVersions of relevant libraries:\n[pip3] mypy-extensions==1.0.0\n[pip3] numpy==1.26.4\n[pip3] nvidia-cublas-cu12==12.4.5.8\n[pip3] nvidia-cuda-cupti-cu12==12.4.127\n[pip3] nvidia-cuda-nvrtc-cu12==12.4.127\n[pip3] nvidia-cuda-runtime-cu12==12.4.127\n[pip3] nvidia-cudnn-cu12==9.1.0.70\n[pip3] nvidia-cufft-cu12==11.2.1.3\n[pip3] nvidia-curand-cu12==10.3.5.147\n[pip3] nvidia-cusolver-cu12==11.6.1.9\n[pip3] nvidia-cusparse-cu12==12.3.1.170\n[pip3] nvidia-cusparselt-cu12==0.6.2\n[pip3] nvidia-nccl-cu12==2.21.5\n[pip3] nvidia-nvjitlink-cu12==12.4.127\n[pip3] nvidia-nvtx-cu12==12.4.127\n[pip3] onnx==1.17.0\n[pip3] onnxruntime==1.20.1\n[pip3] onnxruntime-tools==1.7.0\n[pip3] torch==2.6.0\n[pip3] torchaudio==2.6.0\n[pip3] torchvision==0.21.0\n[pip3] triton==3.2.0\n[conda] Could not collect",
  "transformers_version": "4.50.0.dev0",
  "upper_git_hash": null,
  "tokenizer_pad_token": [
    "<pad>",
    3
  ],
  "tokenizer_eos_token": [
    "</s>",
    2
  ],
  "tokenizer_bos_token": [
    "<s>",
    1
  ],
  "eot_token_id": 2,
  "max_length": 4096,
  "task_hashes": {},
  "model_source": "hf",
  "model_name": "openGPT-X/Teuken-7B-instruct-commercial-v0.4",
  "model_name_sanitized": "openGPT-X__Teuken-7B-instruct-commercial-v0.4",
  "system_instruction": null,
  "system_instruction_sha": null,
  "fewshot_as_multiturn": true,
  "chat_template": "System: A chat between a human and an artificial intelligence assistant.The assistant gives helpful and polite answers to the human's questions.{{- '\\n'}}\n{%- for message in messages %}\n{%- if (message['role']|lower == 'user') != (loop.index0 % 2 == 0) %}\n{{- raise_exception('Roles must alternate User/Assistant/User/Assistant/...') }}\n{%- endif %}\n{%-if message['role']|lower == 'user' %}\n{{- message['role']|capitalize + ': ' + message['content'] + '\\n' }}\n{%- elif message['role']|lower == 'assistant' %}\n{{- message['role']|capitalize + ': ' + message['content'] + eos_token + '\\n' }}\n{%- else %}\n{{- raise_exception('Only user and assistant roles are supported!') }}\n {%- endif %}\n{%- endfor %}{%-if add_generation_prompt %}\n{{- 'Assistant: '}}\n{%- endif %}\n",
  "chat_template_sha": "b1a4e0d8ff5c0beedd738e75f8bbe30520dbd9ce7a09df7020c20ce9e2379277",
  "start_time": 15974606.403268456,
  "end_time": 15995771.152478518,
  "total_evaluation_time_seconds": "21164.749210061505"
}